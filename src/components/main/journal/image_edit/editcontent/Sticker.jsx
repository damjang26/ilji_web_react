import * as fabric from "fabric";
import {EditStickerBtn} from "../../../../../styled_components/main/journal/JournalWriteStyled.jsx";
import {useEffect, useState} from "react";
import {TiDelete} from "react-icons/ti";

const Sticker = ({canvas}) => {
    const [selectedObj, setSelectedObj] = useState(null);
    const [deleteBtnPos, setDeleteBtnPos] = useState({x: 0, y: 0, visible: false});
    const iconSize = 28; // ÏÇ≠Ï†ú ÏïÑÏù¥ÏΩò ÌÅ¨Í∏∞Î•º ÏÉÅÏàòÎ°ú Í¥ÄÎ¶¨ÌïòÎ©¥ Ïú†ÏßÄÎ≥¥ÏàòÍ∞Ä Ìé∏Ìï¥ÏßëÎãàÎã§.

    const stickers = [
        "/images/emoji/sticker1.png",
        "/images/emoji/sticker2.png",
        "/images/emoji/sticker3.png",
        "/images/emoji/sticker4.png",
        "/images/emoji/sticker5.png",
    ];

    const addSticker = async (url) => {
        if (!canvas) return;
        try {
            // fabric.Image.fromURLÏùÄ PromiseÎ•º Î∞òÌôòÌïòÎØÄÎ°ú awaitÏôÄ Ìï®Íªò ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.
            // crossOrigin ÏòµÏÖòÏùÄ Îã§Î•∏ ÎèÑÎ©îÏù∏Ïùò Ïù¥ÎØ∏ÏßÄÎ•º Î∂àÎü¨Ïò¨ Îïå Î∞úÏÉùÌï† Ïàò ÏûàÎäî Î¨∏Ï†úÎ•º Î∞©ÏßÄÌï©ÎãàÎã§.
            const img = await fabric.Image.fromURL(url, {crossOrigin: 'anonymous'});
            img.set({
                left: 100,
                top: 100,
                scaleX: 0.2,
                scaleY: 0.2,
            });
            canvas.add(img);
            canvas.setActiveObject(img); // Ï∂îÍ∞ÄÎêú Ïä§Ìã∞Ïª§Î•º Î∞îÎ°ú ÌôúÏÑ±ÌôîÌï©ÎãàÎã§.
            canvas.renderAll();
        } catch (error) {
            console.error("Ïä§Ìã∞Ïª§Î•º Ï∂îÍ∞ÄÌïòÎäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§:", error);
        }
    };

    useEffect(() => {
        if (!canvas) return;

        const updateDeleteBtnPos = (target) => {
            // targetÏù¥ ÏóÜÏúºÎ©¥(ÏÑ†ÌÉù Ìï¥Ï†ú) Î≤ÑÌäºÏùÑ Ïà®ÍπÅÎãàÎã§.
            if (!target) {
                setDeleteBtnPos({x: 0, y: 0, visible: false});
                return;
            }
            const canvasRect = canvas.getElement().getBoundingClientRect();

            // getBoundingRect() ÎåÄÏã† oCoords.trÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÌöåÏ†Ñ/ÌÅ¨Í∏∞ Ï°∞Ï†àÏóêÎèÑ Ï†ïÌôïÌïú Î™®ÏÑúÎ¶¨ Ï¢åÌëúÎ•º ÏñªÏäµÎãàÎã§.
            const corner = target.oCoords.tr;

            // ÏïÑÏù¥ÏΩòÏù¥ Ïä§Ìã∞Ïª§Ïùò Î™®ÏÑúÎ¶¨ Î∞îÍπ•Ï™ΩÏóê ÏÇ¥Ïßù Í±∏ÏπòÎèÑÎ°ù ÏúÑÏπòÎ•º Ï°∞Ï†ïÌï©ÎãàÎã§.
            // Í∏∞Ï°¥ÏóêÎäî ÏïÑÏù¥ÏΩòÏùò 'Ï§ëÏïô'Ïù¥ Î™®ÏÑúÎ¶¨Ïóê ÏúÑÏπòÌñàÏäµÎãàÎã§ (x: corner.x - 14, y: corner.y - 14).
            // Ïù¥Ï†ú ÏïÑÏù¥ÏΩòÏù¥ Î™®ÏÑúÎ¶¨ÏóêÏÑú ÏÇ¥Ïßù Îñ®Ïñ¥Ï†∏ Î≥¥Ïù¥ÎèÑÎ°ù Ïò§ÌîÑÏÖãÏùÑ Ï°∞Ï†ïÌï©ÎãàÎã§.
            // ÏòàÎ•º Îì§Ïñ¥, ÏïÑÏù¥ÏΩòÏùò ÏôºÏ™Ω ÏïÑÎûò Î∂ÄÎ∂ÑÏù¥ Î™®ÏÑúÎ¶¨ Í∑ºÏ≤òÏóê Ïò§ÎèÑÎ°ù Ìï©ÎãàÎã§.
            setDeleteBtnPos({
                x: canvasRect.left + corner.x - (iconSize / 9), // Ï§ëÏïôÏóêÏÑú Ïò§Î•∏Ï™ΩÏúºÎ°ú Ï°∞Í∏à Ïù¥Îèô (Í∏∞Ï°¥: -14)
                y: canvasRect.top + corner.y - (iconSize * 3 / 3), // Ï§ëÏïôÏóêÏÑú ÏúÑÏ™ΩÏúºÎ°ú ÎßéÏù¥ Ïù¥Îèô (Í∏∞Ï°¥: -14)
                visible: true,
            });
        };

        const handleSelection = (e) => {
            const activeObject = canvas.getActiveObject();
            setSelectedObj(activeObject);
            updateDeleteBtnPos(activeObject);
        };

        // Ïù¥Îèô, ÌÅ¨Í∏∞ Ï°∞Ï†à, ÌöåÏ†Ñ Ïãú Î™®Îëê Î≤ÑÌäº ÏúÑÏπòÎ•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
        const handleTransform = (e) => {
            updateDeleteBtnPos(e.target);
        };

        canvas.on("selection:created", handleSelection);
        canvas.on("selection:updated", handleSelection);
        canvas.on("selection:cleared", handleSelection);
        canvas.on("object:moving", handleTransform);
        canvas.on("object:scaling", handleTransform);
        canvas.on("object:rotating", handleTransform);

        return () => {
            canvas.off("selection:created", handleSelection);
            canvas.off("selection:updated", handleSelection);
            canvas.off("selection:cleared", handleSelection);
            canvas.off("object:moving", handleTransform);
            canvas.off("object:scaling", handleTransform);
            canvas.off("object:rotating", handleTransform);
        };
    }, [canvas]);


    return (
        <div>
            <div style={{
                display: "flex",
                gap: "10px",
                justifyContent: "center",
                alignItems: "center",
                flexWrap: "wrap"
            }}>
                {stickers.map((url, index) => (
                    <EditStickerBtn key={index} onClick={() => addSticker(url)}>
                        <img src={url} alt={`sticker-${index}`}/>
                    </EditStickerBtn>
                ))}
            </div>

            {/* üîπ React ÏïÑÏù¥ÏΩò ÏÇ≠Ï†ú Î≤ÑÌäº */}
            {deleteBtnPos.visible && (
                <TiDelete
                    size={iconSize}
                    color="red"
                    style={{
                        position: "fixed",
                        left: deleteBtnPos.x,
                        top: deleteBtnPos.y,
                        cursor: "pointer",
                        background: "white",
                        borderRadius: "50%",
                        boxShadow: "0 2px 6px rgba(0,0,0,0.3)"
                    }}
                    onClick={() => {
                        if (selectedObj) {
                            canvas.remove(selectedObj);
                            setSelectedObj(null);
                            setDeleteBtnPos({x: 0, y: 0, visible: false});
                            canvas.requestRenderAll();
                        }
                    }}
                />
            )}
        </div>
    );
}
export default Sticker;
